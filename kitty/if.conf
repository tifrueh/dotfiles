# kitty has very powerful font management. You can configure individual font
# faces and even specify special fonts for particular characters.
font_family      VT323
bold_font        auto
italic_font      auto
bold_italic_font auto
font_size        26

# Choose how you want to handle multi-character ligatures. The default is to
# always render them. You can tell kitty to not render them when the cursor is
# over them by using cursor to make editing easier, or have kitty never render
# them at all by using always, if you don’t like them.
disable_ligatures never

# Choose exactly which OpenType features to enable or disable. This is useful
# as some fonts might have features worthwhile in a terminal.
font_features VT323-Regular +zero -liga

# Hide mouse cursor after the specified number of seconds of the mouse not
# being used. Set to zero to disable mouse cursor hiding. Set to a negative
# value to hide the mouse cursor immediately when typing text. Disabled by
# default on macOS as getting it to work robustly with the ever-changing sea of
# bugs that is Cocoa is too much effort.
mouse_hide_wait 1.0

# Detect URLs under the mouse. Detected URLs are highlighted with an underline
# and the mouse cursor becomes a hand over them. Even if this option is
# disabled, URLs are still clickable. See also the underline_hyperlinks option
# to control how hyperlinks (as opposed to plain text URLs) are displayed.
detect_urls no

# Control how hyperlinks are underlined. They can either be underlined on mouse
# hover, always (i.e. permanently underlined) or never which means that kitty
# will not apply any underline styling to hyperlinks. Uses the url_style and
# url_color settings for the underline style. Note that reloading the config
# and changing this value to/from always will only affect text subsequently
# received by kitty.
underline_hyperlinks never

# Remove all mouse action definitions up to this point. Useful, for instance,
# to remove the default mouse actions.
clear_all_mouse_actions yes

# The enabled window layouts. A comma separated list of layout names. The
# special value all means all layouts. The first listed layout will be used as
# the startup layout. Default configuration is all layouts in alphabetical
# order.
enabled_layouts stack

# The tab bar style, can be one of:
#
# fade 
#   Each tab’s edges fade into the background color. (See also tab_fade)
#
# slant 
#   Tabs look like the tabs in a physical file.
#
# separator 
#   Tabs are separated by a configurable separator. (See also
#   tab_separator)

# powerline 
#   Tabs are shown as a continuous line with “fancy” separators. (See
#   also tab_powerline_style)
#
# custom 
#   A user-supplied Python function called draw_tab is loaded from the file
#   tab_bar.py in the kitty config directory. For examples of how to write such a
#   function, see the functions named draw_tab_with_* in kitty’s source code:
#   kitty/tab_bar.py. See also this discussion for examples from kitty users.
#
# hidden 
#   The tab bar is hidden. If you use this, you might want to create a
#   mapping for the select_tab action which presents you with a list of tabs and
#   allows for easy switching to a tab.
tab_bar_style hidden

# The color of the kitty window’s titlebar on macOS. A value of system means to
# use the default system color, light or dark can also be used to set it
# explicitly. A value of background means to use the background color of the
# currently active window and finally you can use an arbitrary color, such as
# #12af59 or red. WARNING: This option works by using a hack when arbitrary
# color (or background) is configured, as there is no proper Cocoa API for it.
# It sets the background color of the entire window and makes the titlebar
# transparent. As such it is incompatible with background_opacity. If you want
# to use both, you are probably better off just hiding the titlebar with
# hide_window_decorations.
macos_titlebar_color background

# Have kitty quit when all the top-level windows are closed on macOS. By
# default, kitty will stay running, even with no open windows, as is the
# expected behavior on macOS.
macos_quit_when_last_window_closed yes

# Remove all shortcut definitions up to this point. Useful, for instance, to
# remove the default shortcuts.
clear_all_shortcuts yes
